@page "/Edit/{uuid}"
@page "/Edit"
@page "/Create"

@using KoroneLibrary.Data;
@inject KoroneLibrary.Data.DataService dataService;
@inject NavigationManager NavigationManager;

@{
    init();
}

<head>
    <link rel="stylesheet" type="text/css" href="css/article/article-read.css" />
</head>

<div class="container">
    <div class="body-paper">
        <div class="float-left" style="margin-top:8px;">
            <NavLink @onclick="Update" class="btn btn-primary" style="color:white;margin:0;margin-left:80px">保存</NavLink>
            <NavLink @onclick="@(e => NavigationManager.NavigateTo($"delete/{Model.Uuid}/{Model.Title}/edit"))" class="btn btn-danger" style="color:white;margin:0;margin-left:10px">删除</NavLink>
        </div>
        
        <div class="bread-crumb float-right m-2">
            <input type="text" class="p1 underline-box" placeholder="标签，用分号；隔开" @bind="Model.Tag" />
        </div>
        <div class="triangle"></div>
        <div class="container">
            <div class="h4 text-center">
                <input class="h4 text-center underline-box" type="text" placeholder="标题" @bind="Model.Title" />
            </div>
            <div class="p-1 text-center">
                <input class="p1 text-center underline-box" type="text" placeholder="作者" @bind="Model.Author" />
            </div>

            <div id="bodybox" class="text-body">
                <textarea class="form-control-lg underline-box" style="width:100%;height:500px" @bind="Model.Body" placeholder="正文"></textarea>
            </div>
            <input type="hidden" @bind="Model.Uuid" />
            <hr />

            <table class="node table table-striped font-weight-light">
                <thead>
                    <tr>
                        <th class="font-weight-light">注释</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Node != null)
                    {
                        @foreach (Pair<string, string> item in Model.Node)
                        {
                            <tr>
                                <td class="w-25">
                                    <input class="font-weight-light underline-box w-100" type="text" placeholder="引用" @bind="item.Key" />
                                </td>
                                <td class="w-75">
                                    <input class="font-weight-light underline-box w-100" type="text" placeholder="注释" @bind="item.Value" />
                                </td>
                                <td>
                                    <button class="btn btn-outline-dark" @onclick="e=>Model.Node.Remove(item)">
                                        <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-trash" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                                            <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                                        </svg>
                                    </button>

                                </td>
                            </tr>
                        }
                    }

                </tbody>
            </table>
        </div>
        <div class="container">
            <input @onclick="AddNode" type="button" class="btn btn-primary w-100w" name="addButton" value="新增一条注释" />

        </div>
    </div>
</div>
@code {
    [Parameter]
    public string uuid { get; set; }
    private KoroneLibrary.Data.Article Model;

    private void init()
    {
        try
        {
            if (uuid == null)
            {
                string uuid = dataService.Save(Model = new Data.Article
                {
                    Node = new List<Pair<string, string>>()
                });
                NavigationManager.NavigateTo($"edit/{uuid}");
            }
            else
            {
                Model = dataService.GetArticle(uuid);
            }
        }
        catch (Exception e)
        {
            Model = new Data.Article
            {
                Title = "Oops,我们遇到了一点问题",
                Body = "该文档可能已被他人删除、移动，被不规范地导入，也可能是系统故障。请尝试重新搜索并访问这个文档，如果所有文档都不可访问，请在“关于”页面查看帮助或联系系统管理员和开发者。",
                Node = new List<Pair<string, string>>()
            };
            Model.Node.Add(new Pair<string, string>("错误信息", e.Message));
            Model.Node.Add(new Pair<string, string>("错误堆栈", e.StackTrace));
        }
    }
    private void AddNode()
    {
        if (Model == null)
            Model = new Data.Article();
        if (Model.Node == null)
            Model.Node = new List<Pair<string, string>>();
        Model.Node.Add(new Pair<string, string>("",""));
    }
    private void Update()
    {
        string uuid = dataService.Update(Model);
        NavigationManager.NavigateTo($"article/{uuid}");
    }
    private void DeleteNode(int src)
    {
        if(Model!=null && Model.Node!=null)
        {
            Model.Node.Remove(Model.Node[src]);
        }
    }
}
